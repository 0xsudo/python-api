AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  AWSAccountId:
    Type: String
    Description: AWS Account ID

  VpcCIDR:
    Type: String
    Default: 10.0.1.0/16
    Description: VPC cidr for launching our stacks

  PrefixName:
    Type: String
    Default: py-api
    Description: Prefixes all the resources we create

  AWSECRRepoName:
    Type: String
    Default: ecr-repo
    Description: Name for our ECR repo

Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ["-", [!Ref PrefixName, "cluster"]]
      
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["-", [!Ref PrefixName, "log-group"]]

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref PrefixName, "role"]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: igw
          Value: !Join ["-", [!Ref PrefixName, "internet-gateway"]]

  VPCIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: cfn-vpc
          Value: !Join ["-", [!Ref PrefixName, "cfn-vpc"]]

  Subnet1: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: 
        !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref AWS::Region

  Subnet2: 
    Type: "AWS::EC2::Subnet"
    Properties: 
      VpcId: 
        !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref AWS::Region

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ContainerSecurityGroup
      GroupDescription: Security group for python container
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ["-", [!Ref PrefixName, "task"]]    
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref PrefixName, "container"]]
          #Image: !Join ["", [!Ref AWSAccountId,".dkr.ecr",!Ref AWS::Region,".amazonaws.com/",!Ref PrefixName,"-",!Ref AWSECRRepoName,":","latest"]]
          Image: 636181284446.dkr.ecr.us-east-1.amazonaws.com/py-api-ecr-repo:latest
          PortMappings:
            - ContainerPort: 7000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RequiresCompatibilities:
        - FARGATE

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Join ["-", [!Ref PrefixName, "service"]] 
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref ALBSecurityGroup
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref PrefixName, "container"]]
          TargetGroupArn: !Ref AppTargetGroup
          ContainerPort: 7000

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for application load balancer
      GroupName: !Join ["-", [!Ref PrefixName, "alb-sg"]]
      Tags:
        - Value: !Join ["-", [!Ref PrefixName, "alb-sg"]]
          Key: alb-sg
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          IpProtocol: tcp
          ToPort: 443
        - IpProtocol: tcp
          FromPort: 7000
          ToPort: 7000
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ["-", [!Ref PrefixName, "alb"]]
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      IpAddressType: ipv4
      Tags:
        - Key: alb
          Value: !Join ["-", [!Ref PrefixName, "alb"]]

  HTTPListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            StatusCode: HTTP_301
            Protocol: HTTPS
            Port: 443
            Host: "#{host}"
            Path: /#{path}
            Query: "#{query}"
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ListernerRuleForTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref AppTargetGroup
  #     Priority: 1
  #     Conditions:
  #       - Field: http-header
  #         HttpHeaderConfig:
  #           HttpHeaderName: X-App-Name
  #           Values:
  #             - app
  #     ListenerArn: !Ref HTTPListner

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # HealthCheckEnabled: true
      # HealthCheckIntervalSeconds: 10
      # HealthCheckPath: /
      # HealthCheckProtocol: HTTP
      # HealthCheckPort: 7000
      # HealthCheckTimeoutSeconds: 5
      # HealthyThresholdCount: 2
      # UnhealthyThresholdCount: 2
      IpAddressType: ipv4
      Port: 7000
      Protocol: HTTP | HTTPS
      Name: !Join ["-", [!Ref PrefixName, "HTTP-Target"]]
      TargetType: alb
      Targets:
        - Id: !Ref ApplicationLoadBalancer
      VpcId: !Ref VPC
